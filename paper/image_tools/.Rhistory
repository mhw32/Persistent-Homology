readRDS('intermediate/fig_5_corr_data.rds')
x <- readRDS('intermediate/fig_5_corr_data.rds')
x
install.packages('TDA')
library(TDA)
install.packages(scatterplot3d)
install.packages('scatterplot3d')
install.packages('rhdf5')
install.packages('rgl')
install.packages('pracma')
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(TDA)
library(pracma)
eulerChar <- function(tseq, diagram, maxdimension, threshold=0) {
    eulerFct <- function(t) {
        if (threshold>0) {
            persistence <- diagram[,3]-diagram[,2]
            diagram <- diagram[which(persistence>=threshold),]
        }
        betti <- numeric(maxdimension)
        for (i in 0:maxdimension) {
            betti[i+1]=((-1)^i)*sum(diagram[,1]==i & diagram[,2]<=t & diagram[,3]>t)
        }
        out <- sum(betti)
        return(out)
    }
    out <- numeric(length(tseq))
    count <- 0
    for (t in tseq) {
        count <- count + 1
        out[count] <- eulerFct(t)
    }
    return(out)
}
cdm_diags <- readRDS('intermediate/fig_13_cdm_diags_4.rds')
wdm_diags <- readRDS('intermediate/fig_13_wdm_diags_4.rds')
index <- 41
my_cdm <- cdm_diags[[index]]
my_wdm <- wdm_diags[[index]]
tseq1 <- seq(min(my_cdm[,2:3]),max(my_cdm[,2:3]),length=5000)
euler1 <- eulerChar(tseq1, my_cdm, maxdimension=max(my_cdm[,1]), threshold=0)
tseq2 <- seq(min(my_wdm[,2:3]),max(my_wdm[,2:3]),length=5000)
euler2 <- eulerChar(tseq2, my_wdm, maxdimension=max(my_wdm[,1]), threshold=0)
pdf('figure_13_max_margin_2euler.pdf')
par(mar=c(5,6,4,2))
plot(euler2, 
     type="l", 
     xlab="Sequence", 
     ylab="EC", 
     col="coral1",
     lwd=3,
     cex.lab=2.0, 
     cex.axis=2.0, 
     cex.main=2.0, 
     cex.sub=2.0)
lines(euler1,
      lwd=3, 
      col="cyan3")
legend("topright", 
       c("CDM", "WDM"), 
       col=c("coral", "cyan"), 
       lwd=3,
       cex=2.0)
dev.off()
library(scatterplot3d)
infile <- "intermediate/fig_14_min_data.bin"
con <- file(infile, "rb")
dim <- readBin(con, "integer", 2)
minMat <- matrix(readBin(con, "numeric", prod(dim)), dim[1], dim[2])
close(con)
infile <- "intermediate/fig_14_max_data.bin"
con <- file(infile, "rb")
dim <- readBin(con, "integer", 2)
maxMat <- matrix(readBin(con, "numeric", prod(dim)), dim[1], dim[2])
close(con)
cdm_slices <- readRDS('../../saved_states/wdm_cdm_raw/cdm_slices_raw.rds')
wdm_slices <- readRDS('../../saved_states/wdm_cdm_raw/wdm_slices_raw.rds')
indexmap <- readRDS('intermediate/indexmap.rds')
regroup_cube_robust <- function(slices, indexmap, n, min_find, max_find) {
  num_row <- 0
  for (i in 1:64) {
    num_row <- num_row + dim(slices[[i]])[1]
  }
  counter <- 1
  cube <- matrix(NA, num_row, 3)
  colors <- matrix(NA, num_row, 1)
  for (i in 1:64) {
    slice <- slices[[i]]
    map <- indexmap[[i]]
    num_in_slice <- dim(slice)[1]
    for (j in 1:3) {
      slice[,j] <- slice[,j] + map[j,1]
    }
    cube[counter:(counter+num_in_slice-1),] <- slice
    if (i %in% max_find) {
      colors[counter:(counter+num_in_slice-1),] <- rgb(1, 0, 0, 0.01)
    } else if (i %in% min_find) {
      colors[counter:(counter+num_in_slice-1),] <- rgb(0, 0, 1, 0.01)
    } else {
      colors[counter:(counter+num_in_slice-1),] <- rgb(0, 0, 0, 0.005)
    }
    counter <- counter + num_in_slice
  }
  return(list(cube=cube, colors=colors))
}
minMat
 minMat[d,]
d <- 1
 minMat[d,]
